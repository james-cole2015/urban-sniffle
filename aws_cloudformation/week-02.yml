---
Parameters:
  RandomNumber:
    Type: "Number"
    Description: "A random number used to generate unique bucket names"
  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instances"

Resources:
Resources:
  Week02Bucket00:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "week-02-bucket00-${RandomNumber}"
      AccessControl: "PublicRead"
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: '15.0.0.0/16'
      Tags:
        - Key: Name
          Value: week-2-vpc
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '15.0.0.0/24'
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: public-subnet-00
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '15.0.1.0/24'
      AvailabilityZone: us-east-1b
      Tags:
        - Key: Name
          Value: private-subnet-00
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: week-2-igw
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public-route-table-00
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  ElasticIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: rhel9-security-group
      GroupDescription: Security group for RHEL 9 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  RHEL9Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-0c41531b8d18cc72b' # RHEL 9
      InstanceType: t2.micro
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName 
      Tags:
        - Key: Name
          Value: Week-02 RHEL Instance
        - Key: platform 
          Value: aws_security_labs
        - Key: Week
          Value: week-02
      UserData: 
        Fn::Base64: !Sub | ## this installs the systems manager agent, the cloudwatch agent, an http server, and the fake log generator
          #!/bin/bash -xe
          sudo dnf install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          sudo systemctl enable amazon-ssm-agent
          sudo systemctl start amazon-ssm-agent
          yum install httpd -y
          echo "Insolence? We are pirates. We donâ€™t even know what that means." > /var/www/html/index.html
          systemctl start httpd 
          yum install wget -y 
          wget https://github.com/mingrammer/flog/releases/download/v0.4.3/flog_0.4.3_linux_amd64.tar.gz
          tar -xvf flog_0.4.3_linux_amd64.tar.gz -C /usr/bin
          touch totally_real_logs
          flog > totally_real_logs
          sudo dnf install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          sudo systemctl enable amazon-ssm-agent
          sudo systemctl start amazon-ssm-agent
      NetworkInterfaces:
        - DeviceIndex: '0'
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !Ref SecurityGroup
          AssociatePublicIpAddress: "true"
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: my-instance-profile
      Roles:
        - !Ref EC2Role
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      RoleName: my-ec2-role-for-ssm
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMPatchAssociation
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
